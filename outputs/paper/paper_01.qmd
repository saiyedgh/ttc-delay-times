---
title: "Exploring Subway Delays and Delay Times"
subtitle: "A study of TTC's subway delays throughout the year 2022"
author: "Syed Hassan"
thanks: "Code and data are available at: https://github.com/saiyedgh/ttc-delay-times"
date: "`r Sys.time()`"
date-format: "DD MMMM YYYY"
abstract: "Subway delays are quite common and might throw us off our schedule if not anticipated. The paper draws insights from a large dataset of total subway delays in 2022. My data analysis and visualization not only enable us to see the bigger picture but also provide information that means something to us as subway users. I found that the start/end stations of the subway routes face the most delays, and the average and most common delay time is under five minutes. "
format: pdf
bibliography: references.bib
---

# Introduction

The city of Toronto has a great commuting system that includes buses, streetcars, and most importantly, subway lines [@ttc_website]. Road traffic might delay buses and streetcars, but delays are not limited to road transport. In fact, subway and rail delays are equally frequent as well. To an everyday user, the delay times are annoying and frustrating. Access to meaningful data about the delays will help us plan and foresee our commute and schedule. The daily users of the subway are over 1.8 million on average [@transport_report]. These numbers include me and might include you and the people around you.

In the following analysis, I aim to illustrate the number of delays, the stations which suffer the most, the average delay times on the different subway lines, and the average on each day of the week. The utilized dataset comes from TTC's published database available at *Open Data Toronto* [@opendatatoronto]. Firstly, the paper demonstrates the frequency of delays and then lists the stations where most delays occur. Subsequently, the analysis summarizes the delay times per minute to provide data that concerns human users.

The report was created using *`R`* [@R] and *`R Studio`* [@r_studio] with *`Quarto`* [@quarto] -- a new version of *`R Markdown`* [@r_markdown]. The main library utilized for this purpose is *`Tidyverse`* [@tidyverse]. Its used sub-packages include *`dplyr`* [@dplyr] to enable query-like syntax, and *`ggplot`* [@ggplot] to create graphs and charts. Other packages and tools include *`here`* [@here], *`janitor`* [@janitor], *`knitr`* [@knitr], *`kableExtra`* [@kableExtra], and *`scales`* [@scales]. Their respective function is to find *CSV* files, clean data, generate reports, create tables, and enable logarithmic axes.

```{r}
#| echo: false
#| warning: false

# loads the required libraries
library(tidyverse)
library(opendatatoronto)
library(janitor)
library(here)
library(scales)
library(knitr)
library(kableExtra)

# disables summaries generated by default
options(dplyr.summarise.inform = FALSE)
```

# Data

The data of interest comes from a credible source, the city of Toronto. Toronto Transit Commission frequently updates and exports its data at Open Data Toronto [@opendatatoronto], owned by the city of Toronto. However, TTC has shared no details on the website about how it collects the data. Our analysis assumes the data is complete, accurate, and non-manipulated. It contains all registered subway delays during the year 2022 [@dataset].\

```{r}
#| echo: false
#| warning: false

# imports the data from the downloaded csv through file 00-download-data.R
ttc_data <- read_csv(
  here::here("inputs/data/ttc-delay-data-2022.csv"),
  show_col_types = FALSE
)

# filtering to exclude empty or NULL rows withing our delay column
ttc_df_filtered <- filter(ttc_data, ttc_data$min_delay > 0)
  
# organizes for averages required for my summary figures
ttc_df_mean <- ttc_df_filtered |>  
  group_by(line) |> 
  summarize(min_delay = mean(min_delay))

df_filtered_01 <- filter(ttc_df_mean, line != "", line != "YU/BD") |> 
  mutate(across(min_delay, round, 2)) # round off

# This is the organized data to be used for our average/mean/mode figures
ttc_df_arranged <- arrange(df_filtered_01, line)

# re-declaring variables for further use
l1 <- "Line 01 Yellow"
l2 <- "Line 02 Green"
l3 <- "Line 03 Scarborough"
l4 <- "Line 04 Sheppard"

```

```{r}
#| echo: false
#| warning: false

# Table 01
# only prints the data with delays
head_data <- ttc_data |>
  filter(min_delay > 0) |> 
  head()

# using kableExtra to draw a table
data_head <- head_data |>
  kbl(col.names = c("date", "time", "day", "station", "code", "min delay", "min gap", "bound", "line", "vehicle"), 
      align = c(rep("c", 1)),
      booktabs=T,
      caption = "An overview of the dataset.") |> 
  kable_styling(
    latex_options = c("striped", "hold_position"),
    font_size=6) |>
  column_spec(6:8, width = "0.6cm") |>
  column_spec(10, width = "0.75cm") |>
  row_spec(0, bold=T)

# calls in the table to be drawn on screen
data_head
```

\
The dataset includes details about the date and time when the delay occurs. Mainly, it records the station, the duration of delay in minutes, the train line, and its direction \[Table 1\]. The different columns include valuable information that will enable us to extract key insights[^1]. The "line" column with "bound" gives us four train lines and two directions for each, giving us eight possible user routes. Similarly, the station information with line direction can narrow down the larger data to precise chunks of meaningful information for a daily user. But before going into summaries and specific inferences, we can analyze the extent of all delays to understand the bigger picture.

[^1]: The dataset also includes the gap in minutes that I have intentionally overlooked in this report. According to the published *readme*, the *min_gap* column refers to the "Time length (in minutes) between trains" [@dataset-readme].

Furthermore, the delay codes can be decoded to evaluate the causes using the published information by TTC itself [@dataset-codes]. However, that analysis has already been published in another report by Alyssa Schleifer [@paper_schleifer].

\newpage

## Visualizing Data

```{r}
#| echo: false
#| warning: false
#| label: total-delays
#| fig-cap: Number of subway delays in minutes.
#| fig-align: center
#| fig-width: 5.5

# Figure 01
# creating histogram using ggplot and using scales to draw a logarithmic chart that will show all data points more effectively
histogram_01 <- ggplot(ttc_data, aes(x=min_delay)) +
  geom_histogram(color = "black", fill = "#c8442d") +
  scale_x_log10(breaks = breaks_log(n = 12), # number of page breaks witht the log scale
              labels = label_comma()) +
   scale_y_log10(breaks = breaks_log(n = 10),
              labels = label_comma()) +
     theme_bw() +
  annotation_logticks() + # for scale marks
  xlab("Minutes") +
  ylab("Number of Delays")

histogram_01
```

The above histogram \[Figure 1\] illustrates the number of delays on all subway lines. It plots the numbers on a log scale which grows exponentially. The breakpoints of the *`y`* axis, on the left, start from 1 and increase drastically to 3,000. Similarly, the *`x`* axis range at the bottom starts from two minutes and overreaches 500 minutes, which is roughly more than 8 hours. However, the delay duration of most of the delays is less than 30 minutes.

According to Figure 1, the most number of delays are around the three-minute mark reaching almost 3,000 in number. Also, delays at the four and five-minute marks stand at around 1,000+ each. That explains that TTC faced around 14 delays of five minutes or less every day.

```{r}
#| echo: false
#| warning: false

# Table 02
# more filters and organization for the table 2
delay_count <- ttc_data |>
  filter(min_delay > 1) |>
  group_by(line) |>
  filter(line != "", line != "YU/BD") |>
  count()

delay_count_table <- delay_count |>
  kbl(col.names = c("Subway Line", "Delays"),
      booktabs=T,
      caption = "Total number of delays according to the four subway lines.") |> 
  kable_styling(
    latex_options = c("striped", "hold_position"),
    font_size=10) |>
  row_spec(0, bold=T)

sum_delays <- sum(delay_count$n)

delay_count_table
```

As per Table 2, the total delays of all trains is 8,973, which is around 24-25 delays per day.

Moving on to a more meaningful inference, let's look at the stations that faced the most delays during 2022.

```{r}
#| echo: false
#| warning: false

# more organization as well as rounding off numbers
stations_delay <- ttc_df_filtered |>
  group_by(station, line, bound) |> 
  summarize(i = n(), min_delay = mean(min_delay)) |> 
  mutate(across(min_delay, round, 2))

stations_delay_arranged <- stations_delay |>  
  arrange(desc(i))

top_10_delays <- stations_delay_arranged[1:10,]
row_id <- seq(1, nrow(top_10_delays))
top_10_delays$row_id = row_id
top_10_delays <- top_10_delays |> 
  relocate(row_id)

names_table_columns <- c("#", "Station", "Line", "Bound", "Delays", "Avg Delay Time")


```

```{r}
#| echo: false
#| warning: false

# Table 03
# the table includes stations with most number of delays and average delay time.
delay_table <- top_10_delays |> 
  kbl(col.names = names_table_columns,
      align = c(rep("c", 1), rep("l", 2), rep("c", 3)),
      booktabs=T,
      caption = "Top 10 stations with most number of delays and average delay time.",) |> 
  kable_styling(
    latex_options = c("striped", "hold_position"),
    font_size=9, full_width = F) |>
  column_spec(2, width = "5cm") |>
  column_spec(6, width = "1.5cm") |>
  row_spec(0, bold=T)

delay_table

```

According to Table 3, most delays occurred at *Finch Station* with 518 delays in total and an average delay of 4.6 minutes. Similarly, *Eglinton Station*, not only ranked number two but also number seven, with delays occurring on both routes, north, and south. The above information is beneficial for TTC users, which will help them anticipate delays in their schedule if they pass or use the above stations.

Transitioning back to the various train lines and their delays, let's visualize and compare their average delay times.

```{r}
#| echo: false
#| warning: false
#| label: fig-line-delays
#| fig-cap: TTC subways line with average delay times.
#| fig-align: center
#| fig-height: 2.75
#| fig-width: 5.5

# Figure 02
# creating a bar graph with custom colors using ggplot
bar_graph_01 <- ggplot(data = ttc_df_arranged, aes (x = line, y = min_delay, fill = line)) +
  geom_bar(stat = "identity", alpha = 0.9, width = 0.5) +
  scale_fill_manual(values = c("Line 01 Yellow" = "#fedd0b",
                              "Line 02 Green" = "#439523",
                              "Line 03 Scarborough" = "#00a8e0",
                              "Line 04 Sheppard" = "#830b53")) +
  geom_text(aes(label = min_delay), vjust = -0.3, size = 3) + # draws calculated numbers over the each bar
  ylim(0, 15) + # for axes on y axis
  xlab("Trains") + # labels the X axis
  ylab("Delay time (minutes)") + # labels the Y axis
  theme(rect = element_blank(),
        legend.position = "none",
        axis.line = element_line(colour = "#5a6472", # border for the figure
                      size = 0.5, linetype = "solid")
        )

# calls the stored graph to show on screen
bar_graph_01


```
\newpage
Looking at Figure 2, we can see that the Scarborough or Blue line delays are the longest, averaging at around 14 minutes per delay. The number is lethargically long. In many cases, averages don't speak for themselves. And delays due to exceptional circumstances can distort the average.
For this reason, let's move on towards visualizing the mode, or the most common delay occurrence. 
```{r}
#| echo: false
#| warning: false

# mode calculation for figure 3

getmode <- function(v) {
 uniqv <- unique(v)
 uniqv[which.max(tabulate(match(v, uniqv)))]
}
# mode formula taken fomr https://www.tutorialspoint.com/r/r_mean_median_mode.htm

delay_01 <- filter(ttc_df_filtered, ttc_df_filtered$line == l1)
delay_02 <- filter(ttc_df_filtered, ttc_df_filtered$line == l2)
delay_03 <- filter(ttc_df_filtered, ttc_df_filtered$line == l3)
delay_04 <- filter(ttc_df_filtered, ttc_df_filtered$line == l4)

mode_01 <- getmode(delay_01$min_delay)
mode_02 <- getmode(delay_02$min_delay) 
mode_03 <- getmode(delay_03$min_delay) 
mode_04 <- getmode(delay_04$min_delay)

line_names <- c(l1, l2, l3, l4)
line_delay_modes <- c(mode_01, mode_02, mode_03, mode_04)

mode_frame <- tibble(
  line = line_names,
  min_delay = line_delay_modes
)

```

```{r}
#| echo: false
#| warning: false
#| label: fig-delays-mode
#| fig-cap: Most common delay duration in minutes.
#| fig-align: center
#| fig-height: 2.1
#| fig-width: 5.15

# Figure 3
bar_graph_02 <- ggplot(data = mode_frame, aes(x = line, y = min_delay, fill = min_delay)) +
  geom_bar(stat = "identity", alpha = 0.9, width = 0.5) +
  geom_text(aes(label = min_delay), vjust = -0.3, size = 3) +
  ylim(0, 6) +
  xlab("Trains") +
  ylab("Avg delay time (minutes)") +
  scale_fill_gradient2(low = "white", # the gradient uses a range of colors
                     midpoint = 0,
                     high = "#c8442d") +
  theme(rect = element_blank(),
        legend.position = "none",
        axis.line = element_line(colour = "#5a6472", 
                      size = 0.5, linetype = "solid")
        )

# calls the stored graph to show on screen
bar_graph_02
```

The above chart \[Figure 3\] demonstrates that the most common delay is three minutes on the Yellow and Green lines, and five minutes on the Scarborough and Sheppard lines. The mode explains that there might be exceptional delays on the train lines that may be extending the average or mean delay time \[Figure 2\]. However, the everyday commuter can expect a five-minute delay or less as those are the most common duration. 
```{r}
#| echo: false
#| warning: false

# calculating averages for the weekly average chart, Figure 4
ttc_data_days <- ttc_data |> 
  group_by(day) |> 
  summarize(min_delay = mean(min_delay)) |> 
  mutate(across(min_delay, round, 2))

ttc_df_mean <- ttc_df_filtered |>  
  group_by(line) |> 
  summarize(min_delay = mean(min_delay))
```

Lastly, let's analyze the delays per day of the week, which will help us visualize and understand a weekly delay pattern.
```{r}
#| echo: false
#| warning: false
#| label: fig-delays-days
#| fig-cap: Subway delay average over days of the week.
#| fig-align: center
#| fig-height: 2.1
#| fig-width: 5.15

# Figure 4
bar_graph_03 <- ggplot(ttc_data_days, aes(x=factor(day, level=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")), y = min_delay)) +
  geom_bar(stat = "identity", alpha = 0.9, width = 0.25) +
  geom_col(aes(fill = min_delay)) + 
  scale_fill_gradient2(low = "white",
                       midpoint = mean((ttc_data_days$min_delay)*0.75),
                       high = "#FF6666") +
  geom_text(aes(label = min_delay), vjust = -0.3, size = 3) +
  ylim(0, 5) +
  xlab("Days of the week") +
  ylab("Delay time (minutes)") +
  theme(rect = element_blank(),
        legend.position = "none",
        axis.line = element_line(colour = "#5a6472", 
                      size = 0.5, linetype = "solid")
        )

# calls the stored graph to show on screen
bar_graph_03

```
We can visualize that Sunday, Monday, and Tuesday face more delays on average [Figure 4].

\newpage
# Discussion
## The first and last stations face the most delays.
Except for *Wilson Station* and *Eglinton Station*, all the stations that made it to the top 10 list with the most delays are either the last station of the line or the transitioning stations \[Table 2\]. There can be many reasons which need further examination, but the pattern is quite obvious. The central and transitioning stations are the busiest. Hence, they bear the most burden as well as face delays. Lines 03 and 04 did not make it to the list because their frequency is less than the old lines 01 and 02. The delays at *Eglington Station* are also understandable due to the construction of line 05 [@line-05]. *Wilson Station*, however, is an odd member within this pattern. 

## Averages are not always clear.
The averages did not speak clearly. Because the mean includes all delays, it adds unnecessary numbers to the list. Exceptional delays due to criminal incidents or weather conditions might be a part of the list. Even though these numbers are required to be included in data, they should be avoided when calculating analysis such as average delay times for everyday users \[Figure 2\]. Calculating the mode, however, bypasses such distortions of the mean or average. The most common delay record for each line solves our problem \[Figure 3\].

## Analyzing different kinds of summaries might create a better picture.
Despite the murky picture sketched by averages, analyzing data summary from different perspectives fills the gaps. From Figure 2 we understand that Line 03 has an exceptional delay average despite its small route distance [@ttc-map]. We also know the most common delay times are three and five minutes \[Figure 3\]. However, Line 03 might have exceptionally long delays than Line 04, which increased its average delay in Figure 2.

## Fourth discussion point
Lastly, the weekly delay average is around 3-4 minutes. However, we are more likely to face long delays on Sunday, Monday, and Tuesday. This summary does not explain any significant pattern by mere visuals. However, it paves the way to research the reason for the delay on one weekend and two weekdays. It could be due to TTC's work schedule or due to other external reasons. 


## The weekly average dilemma.

Even though this paper aimed to utilize data to create meaningful insights for a user, a more comprehensive analysis could have been more exploratory. The subsequent version of this paper will aim to analyze and visualize it.

The dataset is also limited to one year. Comparing data from previous years can help us understand the patterns even better. The next step would have data imported from the previous five years, from 2019-2022. Such analysis would also uncover more patterns, such as the effect of COVID-19 on subway delays.

\newpage

# References
